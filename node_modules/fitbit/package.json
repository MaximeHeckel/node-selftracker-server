{
  "name": "fitbit",
  "version": "0.0.5",
  "description": "Fitbit API client",
  "main": "lib/fitbit.js",
  "scripts": {
    "test": "grunt test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/p-m-p/node-fitbit.git"
  },
  "keywords": [
    "fitbit"
  ],
  "author": {
    "name": "Phil Parsons"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "gitHead": "75eaae79c2d84ef0df1b024f1723c67014fc4bdb",
  "dependencies": {
    "oauth": "git://github.com/p-m-p/node-oauth",
    "lodash": "~1.3.1"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-jasmine-node": "~0.1.0",
    "grunt-contrib-jshint": "~0.6.0",
    "sinon": "~1.7.3"
  },
  "readme": "Fitbit API Client for Node.js [![Build Status](https://travis-ci.org/p-m-p/node-fitbit.png?branch=master)](https://travis-ci.org/p-m-p/node-fitbit)\n===\n\nCurrently a read only implementation for reading data from the Fitbit API\nas an authenticated user.\n\n###Â TODO\n\nI've split this into two sections, top section is what I need to have for the\nproject I created this module for and the latter is what the API supports.\n\nNeeded by me:\n\n* Add user model\n* Add time series data for models\n* Allow data models to be updated(\"logged\") and deleted via the API\n\nSupported by API:\n\n* Add Blood pressure, heart rate, glucose resource models\n* Add goals for all models that support them\n* Collection metadata models\n* Anything else...\n\n### Installation\n\n`npm install fitbit`\n\n### Usage\n\nBelow is an example usage for authenticating and making a resource request:\n\n```javascript\nvar express = require('express')\n  , config = require('./config/app')\n  , app = express()\n  , Fitbit = require('fitbit');\n\napp.use(express.cookieParser());\napp.use(express.session({secret: 'hekdhthigib'}));\napp.listen(3000);\n\n// OAuth flow\napp.get('/', function (req, res) {\n  // Create an API client and start authentication via OAuth\n  var client = new Fitbit(config.CONSUMER_KEY, config.CONSUMER_SECRET);\n\n  client.getRequestToken(function (err, token, tokenSecret) {\n    if (err) {\n      // Take action\n      return;\n    }\n\n    req.session.oauth = {\n        requestToken: token\n      , requestTokenSecret: tokenSecret\n    };\n    res.redirect(client.authorizeUrl(token));\n  });\n});\n\n// On return from the authorization\napp.get('/oauth_callback', function (req, res) {\n  var verifier = req.query.oauth_verifier\n    , oauthSettings = req.session.oauth\n    , client = new Fitbit(config.CONSUMER_KEY, config.CONSUMER_SECRET);\n\n  // Request an access token\n  client.getAccessToken(\n      oauthSettings.requestToken\n    , oauthSettings.requestTokenSecret\n    , verifier\n    , function (err, token, secret) {\n        if (err) {\n          // Take action\n          return;\n        }\n\n        oauthSettings.accessToken = token;\n        oauthSettings.accessTokenSecret = secret;\n\n        res.redirect('/stats');\n      }\n  );\n});\n\n// Display some stats\napp.get('/stats', function (req, res) {\n  client = new Fitbit(\n      config.CONSUMER_KEY\n    , config.CONSUMER_SECRET\n    , { // Now set with access tokens\n          accessToken: req.session.oauth.accessToken\n        , accessTokenSecret: req.session.oauth.accessTokenSecret\n        , unitMeasure: 'en_GB'\n      }\n  );\n\n  // Fetch todays activities\n  client.getActivities(function (err, activities) {\n    if (err) {\n      // Take action\n      return;\n    }\n\n    // `activities` is a Resource model\n    res.send('Total steps today: ' + activities.steps());\n  });\n});\n```\n",
  "bugs": {
    "url": "https://github.com/p-m-p/node-fitbit/issues"
  },
  "homepage": "https://github.com/p-m-p/node-fitbit",
  "_id": "fitbit@0.0.5",
  "dist": {
    "shasum": "1d2aa8df8061fbb2f3083ccbf1b80941ddb5e187"
  },
  "_from": "fitbit@",
  "_resolved": "https://registry.npmjs.org/fitbit/-/fitbit-0.0.5.tgz"
}
